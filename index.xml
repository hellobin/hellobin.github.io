<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>不足为外人道</title>
    <link>/</link>
    <description>Recent content on 不足为外人道</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Mar 2018 21:58:58 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>archives</title>
      <link>/archives/</link>
      <pubDate>Fri, 16 Mar 2018 21:58:58 +0800</pubDate>
      
      <guid>/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>程序猿和科比</title>
      <link>/post/joke/0/</link>
      <pubDate>Thu, 07 Jan 2016 10:12:02 +0800</pubDate>
      
      <guid>/post/joke/0/</guid>
      <description>程序员问科比：“你为什么这么成功？”
科比：“你知道洛杉矶早晨4点钟是什么样子吗？”
程序员：“知道，一般那时候我还没睡。怎么了？”
科比：“……没事！”
 跟程序员比辛苦，你打完炮了人家还在抠腚呢~想想也是苦逼的程序员一枚。。不说了，都是泪。。
 </description>
    </item>
    
    <item>
      <title>OSX环境下liteide的安装和配置</title>
      <link>/post/osx%E7%8E%AF%E5%A2%83%E4%B8%8Bliteide%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 26 Apr 2015 21:56:59 +0800</pubDate>
      
      <guid>/post/osx%E7%8E%AF%E5%A2%83%E4%B8%8Bliteide%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>&amp;emsp;&amp;emsp;首先要安装qt
$ brew update &amp;amp;&amp;amp; brew install qt  &amp;emsp;&amp;emsp;clone liteide代码
$ git clone https://github.com/visualfc/liteide.git $ cd liteide/build $ ./update_pkg.sh $ export QTDIR=/usr/local/Cellar/qt/xxx //qt的版本号 $ ./build_osx.sh $ ./deploy_osx_qt4.sh  &amp;emsp;&amp;emsp;最后的结果在 liteide/build/liteide,但是liteide/liteidex/liteide/bin 下面也有一个更小的版本。
&amp;emsp;&amp;emsp;liteide需要gdb来调试go程序，check下系统有安装了gdb。(命令行下敲gdb有版本信息输出，有安装的话 用 which gdb 看下gdb的路径，签名的时候用得着)。没有的话
brew update &amp;amp;&amp;amp; brew install gdb  然后还要给gdb签名，需要创建一个code signing证书。 &amp;emsp;&amp;emsp;如图所示，一直continue，直到选择证书存放地址，选择system。右键刚才创建的 gdbCert 证书，选择Get Info，点击“信任”， 会显示可以自定义的信任选项。代码签名”选择“总是信任” （Code Signing to Always Trust）。 &amp;emsp;&amp;emsp;执行：
$codesign -s gdb-cert /path/to/gdb  然后重启下系统，在liteide中打开view-&amp;gt;edit current environment，在配置文件中设置下
LITEIDE_GDB=/path/to/gdb  然后就可以在liteide中尽情的享受调试go的快感。。。（目前免费方案中最好用的golang ide，无障碍单步调试）</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>/about/</link>
      <pubDate>Tue, 14 Apr 2015 22:17:00 +0200</pubDate>
      
      <guid>/about/</guid>
      <description>85后老程序员
 2005~2012年 蛰伏与西北某高校潜心修行 2012~2013年初 初出茅庐，进入某通信巨头西安分舵 2013年 折腾于彭城，相遇人生的另一半 2014年 迎着移动互联网的浪潮，南下魔都，在游戏行业扑腾至今  Mail: icenan2#At#gmail.com</description>
    </item>
    
    <item>
      <title>C&#43;&#43;智能指针</title>
      <link>/post/c&#43;&#43;%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Sat, 07 Jun 2014 17:50:24 +0800</pubDate>
      
      <guid>/post/c&#43;&#43;%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>&amp;emsp;&amp;emsp;关于智能指针，C++11中废弃了原来的auto_ptr，引入了shared_ptr,unique_ptr,weak_ptr。在引入智能指针之前，我们使用原生指针(built-in or raw)来手动控制内存的操作和释放，稍有不慎常会发生各种内存泄露或者undefined行为，这点使用c/c++开发过项目的必然都深有体会。世间万事万物都有其两面性，我们享受直接内存操作的便利快感的同时，有时候难免要忍受调试各种稀奇古怪的内存bug的酸爽。下面将逐个剖析新的智能指针系列引入的这几种类型的背后实现机制以及对于开发工作会有那些帮助。
shared_ptr &amp;emsp;&amp;emsp;首先这三种类型都是STL中实现的，具体不同的编译器附带的STL中的实现会有差异(事实上差异还比较大)，但是我们使用的时候需要引用的同一个头文件名:
#include&amp;lt;memory&amp;gt;  由于本人的主要开发环境是OS X,对应的主力编译器是clang,clang默认由原来使用GNU的libstdc++到现在自己重新实现了一套c++标准库，叫libc++,所以这里不加特别说明的话，当介绍具体实现的时候，默认指的是libc++的实现。
&amp;emsp;&amp;emsp;shared_基本用法:
#include &amp;lt;iostream&amp;gt; #include &amp;lt;memory&amp;gt; using namespace std; class X{ public: X()=default; X(int value) :data(value) { cout &amp;lt;&amp;lt;&amp;quot;constructor&amp;quot;&amp;lt;&amp;lt;endl; } ~X() { cout &amp;lt;&amp;lt;&amp;quot;destrucctor&amp;quot;&amp;lt;&amp;lt;endl; } int get_data() const { return data; } friend ostream&amp;amp; operator &amp;lt;&amp;lt; (ostream &amp;amp;out, const X&amp;amp; x) { out &amp;lt;&amp;lt;x.get_data(); return out; } private: int data; }; void f() { shared_ptr&amp;lt;X&amp;gt; sp(new X(5)); // cout&amp;lt;&amp;lt;*sp&amp;lt;&amp;lt;endl; //the same use as raw point cout &amp;lt;&amp;lt;&amp;quot;data = &amp;quot;&amp;lt;&amp;lt;sp-&amp;gt;get_data()&amp;lt;&amp;lt;endl; cout &amp;lt;&amp;lt;&amp;quot;use_count = &amp;quot; &amp;lt;&amp;lt;sp.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;右值引用</title>
      <link>/post/c&#43;&#43;%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</link>
      <pubDate>Fri, 21 Mar 2014 16:20:01 +0800</pubDate>
      
      <guid>/post/c&#43;&#43;%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</guid>
      <description>value category &amp;emsp;&amp;emsp;左值/右值是沿用c语言中的叫法，直观上理解就是分别出现在赋值表达式左右。c++标准中关于左值和右值的描述如下:
 An lvalue (so called, historically, because lvalues could appear on the left-hand side of an assignment expression)designates a function or an object. [ Example: If E is an expression of pointer type, then *E is an lvalue expression referring to the object or function to which E points. As another example, the result of calling a function whose return type is an lvalue reference is an lvalue.</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43;学习资源</title>
      <link>/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</link>
      <pubDate>Sun, 09 Mar 2014 21:52:05 +0800</pubDate>
      
      <guid>/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</guid>
      <description>  IBM C/C++ Cafe C++ FAQ C++11FAQ by Bjarne Stroustrup latest C++ standards drafts C++11’s Smart Pointers More C++ Idioms University of Michigan&amp;rsquo;s EECS 381 - Object-Oriented and Advanced Programming CppTemplateTutorial-空明流转作品 apple libcpp isocpp  Blogs  Solarian Programmer  Graphic  How OpenGL works:soft render  Network  skynet&amp;ndash;A lightweight online game framework The C10K problem Fast portable non-blocking network programming with Libevent cppreference  </description>
    </item>
    
    <item>
      <title>C&#43;&#43;特殊成员函数总结</title>
      <link>/post/c&#43;&#43;%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 25 Aug 2013 09:48:23 +0800</pubDate>
      
      <guid>/post/c&#43;&#43;%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</guid>
      <description>&amp;emsp;&amp;emsp;所谓特殊成员函数，按照c++11的标准描述：
 The default constructor, copy constructor and copy assignment operator , move constructor and move assignment operator , and destructor are special member functions. [Note: The implementation will implicitly declare these member functions for some class types when the program does not explicitly declare them. The implementation will implicitly define them if they are odr-used.
 总结下就是：
 Default constructors //默认构造函数 Destructors //析构函数 Copy constructors //拷贝构造函数 Copy assignment operators //拷贝赋值操作 Move constructors // move 构造函数 Move assignment operators //move 复制操作  根据标准中的描述，对于特殊成员函数，如果程序中没有明确的声明，编译器实现会进行隐式的声明，而且符合odr规则，也会提供一份隐式的实现。（odr&amp;ndash;One Definition Rule）。这里我们举个例子验证下：</description>
    </item>
    
    <item>
      <title>“名不副实”的JSON</title>
      <link>/post/%E5%90%8D%E4%B8%8D%E5%89%AF%E5%AE%9E%E7%9A%84json/</link>
      <pubDate>Wed, 15 May 2013 09:21:14 +0800</pubDate>
      
      <guid>/post/%E5%90%8D%E4%B8%8D%E5%89%AF%E5%AE%9E%E7%9A%84json/</guid>
      <description>JSON (Javascript Object Notation):直接翻译就是javascript的对象表示方法。是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。 它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。也就是说现在的JSON俨然已经“名不副实”了。
JSON的特点:  JSON 是纯文本
 JSON 具有“自我描述性”（人类可读）
 JSON 具有层级结构（值中存在值）
 JSON 可通过 JavaScript 进行解析
 JSON 数据可使用 AJAX 进行传输
  与XML相比  没有结束标签
 更短
 读写的速度更快
 能够使用内建的 JavaScript eval() 方法进行解析
 使用数组
 不使用保留字
正因为如此JSON大有取缔XML之势  JSON 的语法规则 JSON 语法是 JavaScript 对象表示法语法的子集。</description>
    </item>
    
    <item>
      <title>centos下源码安装php5.3.24注意事项</title>
      <link>/post/centos%E4%B8%8B%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85php5.3.24%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Sun, 14 Apr 2013 22:13:13 +0800</pubDate>
      
      <guid>/post/centos%E4%B8%8B%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85php5.3.24%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>1.注意事项.
&amp;emsp;&amp;emsp;需要先安装libxml2 和 libxml2-devel
2.php.ini的路径
&amp;emsp;&amp;emsp;在Unix上，php.ini文件缺省放在/usr/local/lib上面，因为缺省的存放路径是/lib，但是可以在编译的时候使用&amp;ndash;with-config-file-path参数 来修改php.ini的存放位置，例如你可以使用&amp;ndash;with-config-file-path=/etc把它存放到/etc下面，然后可以从源码包中拷贝php.ini-develop 或者 php.ini-product到/etc/php.ini并修改使之满足需要。
3.安装php的mcrypt扩展(动态加载编译)
&amp;emsp;&amp;emsp;执行 yum list installed|grep mcrypt查看mcrypt及依赖库是否安装，没有的话执行 yum -y install libmcrypt libmcrypt-devel mcrypt mhash安装。下载php下的mcrypt扩展或者直接下载php的完整安装包,切换到php代码下的 ext/mcrypt目录执phpize命令（phpize是用来扩展php扩展模块的，通过phpize可以建立php的外挂模块）执行完后，会发现当前目录下多了一些configure文件，执行:
./configure --with-php-config=/usr/local/bin/php-config` //根据具体的安装路径 make &amp;amp;&amp;amp; make install  最后出现提示：
Installing shared extensions: /path //path可在 php-config 中的extension_dir处设置
接下来在php.ini 中修改
extension_dir=/path extension=mcrypt.so  4.在安装gd扩展的时候 如果出现 configure: error: png.h not found.的错误
需要安装一下 libpng-devel
yum -y install libpng-devel 即可
5.在安装curl扩展的时候如果出现：
configure: error: Please reinstall the libcurl distribution - easy.h should be in /include/curl/  解决办法同4，安装一下curl的devel包就ok了</description>
    </item>
    
    <item>
      <title>magento 1.7.02安装问题</title>
      <link>/post/magento-1.7.02%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 13 Apr 2013 22:40:08 +0800</pubDate>
      
      <guid>/post/magento-1.7.02%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/</guid>
      <description>&amp;emsp;&amp;emsp;很明显错误的提示是当前数据库不支持InnoDB storage engine，但是通过show engines命令以及phpinfo()函数查看，mysql的InnodB都是正常的，后来搜到magento中文社区的一篇文章,原因是Mysql 5.6.1版本已经已经丢弃了have_innodb这个函数.而Magento1.7.0.2以下都是使用该函数检测Mysql是否激活了InnodB引擎。而我的数据库版本正好是5.6.10按照文章中的修改方法:
在文件app/code/core/Mage/Install/Model/Installer/Db/Mysql4.php中找到以下代码
$variables = $this-&amp;gt;_getConnection()-&amp;gt;fetchPairs(&#39;SHOW VARIABLES&#39;);  在其后加上:
if (!isset($variables[&#39;have_innodb&#39;])) { $engines = $this-&amp;gt;_getConnection()-&amp;gt;fetchPairs(&#39;SHOW ENGINES&#39;); return (isset($engines[&#39;InnoDB&#39;]) &amp;amp;&amp;amp; ($engines[&#39;InnoDB&#39;] == &#39;DEFAULT&#39; || $engines[&#39;InnoDB&#39;] == &#39;YES&#39;); ...  原来的return语句注释掉或者保留都不会影响。刷新一下即可继续正常安装了。</description>
    </item>
    
    <item>
      <title>centos下mysql5.6.10源码安装</title>
      <link>/post/centos%E4%B8%8Bmysql5.6.10%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 06 Apr 2013 22:33:21 +0800</pubDate>
      
      <guid>/post/centos%E4%B8%8Bmysql5.6.10%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/</guid>
      <description>从mysql5.5起，mysql源码安装开始使用cmake了，所以首先要安装cmake 可以用命令:
rpm -qa | grep cmake  查询当前系统有没有安装查cmake。
下载解压安装cmake
#tar -zvxf cmake-2.8.3.tar.gz #cd cmake-2.8.3 #./configure #make #make install  可能会出现没有C++编译器的错误，默认的gcc默认没有支持c++，使用以下语句安装
#yum -y install gcc-c++  执行源码编译配置脚本
cmake \ -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \ -DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock \ -DDEFAULT_CHARSET=utf8 \ -DDEFAULT_COLLATION=utf8_general_ci \ -DWITH_MYISAM_STORAGE_ENGINE=1 \ -DWITH_INNOBASE_STORAGE_ENGINE=1 \ -DWITH_ARCHIVE_STORAGE_ENGINE=1 \ -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \ -DWITH_MEMORY_STORAGE_ENGINE=1 \ -DWITH_READLINE=1 \ -DENABLED_LOCAL_INFILE=1 \ -DMYSQL_DATADIR=/db/mysql/data \ -DMYSQL_USER=mysql \ -DMYSQL_TCP_PORT=3306  如果出现以下错误：
cmake . -- MySQL 5.5.8 -- Could NOT find Curses (missing: CURSES_LIBRARY CURSES_INCLUDE_PATH) CMake Error at cmake/readline.</description>
    </item>
    
    <item>
      <title>CentOS的逆袭</title>
      <link>/post/centos%E7%9A%84%E9%80%86%E8%A2%AD/</link>
      <pubDate>Fri, 08 Mar 2013 22:52:24 +0800</pubDate>
      
      <guid>/post/centos%E7%9A%84%E9%80%86%E8%A2%AD/</guid>
      <description>最近想用python搭个网站，研究了目前主流服务器的配置，最后操作系统决定选择CentOS，为什么选它呢：
 免费
 稳定 以前用过，容易上手和维护~   CentOS的英文全称是Community Enterprise Operating System,翻译一下就是社区版企业操作系统，Linux的众多发行版之一，是由Red Hat Enterprise Linux（大名鼎鼎的小红帽）的开源代码重新修改编译而成。用时下比较流行的一个词语就是CentOS其实就是一个彻头彻尾的山寨版 RHEL，而且人家还是完全合法的山寨。众所周知Linux的内核发布遵循GNU的GPL开源协议，红帽在linux内核的基础上开发面向企业用户的linux发行版，其所有的源代码也必须开源RHEL高度的稳定性和安全性在服务器领域是有口皆碑的。所以提到CentOS不能不介绍下RHEL。
&amp;emsp;&amp;emsp;RHEL（Red Hat Enterprise Linux）是由RedHat公司在linux内核的基础上开发的面向企业用户的众多linux发行版之一 ，由于其强大的安全性和高度的稳定性，在web服务器端被广泛使用。RHEL在发行的时候，有两种方式，一种是二进制的发行方式，另外一种是源代码的发行方式。无论是哪一种发行方式，你都可以免费获得（例如从网上下载），并再次发布。但如果你使用了他们的在线升级（包括补丁）或咨询服务，就必须要付费（这也是红帽的主要盈利模式）。RHEL 一直都提供源代码的发行方式，CentOS 就是将 RHEL 发行的源代码去掉RedHat商标之后重新编译一次，形成一个可使用的二进制版本。由于 LINUX 的源代码是 GNU，所以从获得 RHEL 的源代码到编译成新的二进制，都是合法的。只是 REDHAT 是商标，所以必须在新的发行版里将 REDHAT 的商标去掉。REDHAT 对这种发行版的态度是：&amp;rdquo;我们其实并不反对这种发行版，真正向我们付费的用户，他们重视的并不是系统本身，而是我们所提供的商业服务。&amp;rdquo; 所以，CentOS 可以得到 RHEL 的所有功能，甚至是更好的软件。但 CentOS 并不向用户提供商业支持，当然也不负上任何商业责任。如果你要将你的 RHEL 转到 CentOS 上，因为你不希望为 RHEL 升级而付费。当然，你必须有丰富 linux 使用经验，因此 RHEL 的商业技术支持对你来说并不重要。但如果你是单纯的业务型企业，那么还是建议你选购 RHEL 软件并购买相应服务。这样可以节省你的 IT 管理费用，并可得到专业服务。一句话，选用 CentOS 还是 RHEL，取决于你所在公司是否拥有相应的技术力量。
&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; &amp;emsp;&amp;emsp;&amp;emsp;图 linux阵营里各发行版在服务器端的市场份额
从渊源上讲CentOS和RHEL完全是一奶同胞的亲兄弟，差别只是RHEL有红帽这个有钱的干爹。从份额上看为什么傍干爹的RHEL干不过自生自灭的CentOS，老湿窃以为有几个原因：1.RHEL虽然根正苗红，而且有正规的技术支持和商业服务，但是服务费用确实有点高哈，号称每台一年的服务费用1000刀，对于有几十上百台服务器的用户来讲这是笔不小的预算，高富帅才玩得起；2.对于服务器而言可靠性和稳定性非常重要,RHEL每五年左右更新一次，在系统的稳定性和安全性上有着极大的优势，但是对许多服务不利，比如MySQL和PHP等工具，它们在这五年的发布周期中可能会进行繁重的开发和大量的修改，尽管YUM工具的出现已经解决了软件包的更新问题，但是由于CentOS滞后于RHEL发布，这一过程中可能会修复一些最新版RHEL中的已知小bug,这也算是CentOS的一个优势；3.其它发行版本诸如fedora、Ubuntu等在作为服务器在稳定上与这二位相比还是略逊一筹; 3.CentOS 是RHEL的克隆版，如果需要可以随时平滑切换到 RHEL，从而享受红帽的服务支持。
所以从创业的角度看，CentOS作为服务器无疑是首选，性价比最高，而且创业成功屌丝逆袭之后需要相应的技术支持和商业服务来降低运营风险时也可以很方便平稳的过渡到RHEL，傍上红帽这棵大树。一句话，选用 CentOS 还是 RHEL，不仅仅取决于你所在公司是否拥有相应的技术力量，还取决于一旦出了问题能不能找到个背黑锅的。</description>
    </item>
    
    <item>
      <title>centos搭建svn服务器</title>
      <link>/post/centos%E6%90%AD%E5%BB%BAsvn%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Mon, 18 Feb 2013 21:43:12 +0800</pubDate>
      
      <guid>/post/centos%E6%90%AD%E5%BB%BAsvn%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description> 安装 首先安装subversion，直接： yum -y install subversion svnserve --version 查看 返回版本号说明安装成功 建立svn库,执行：
svnadmin create /opt/svn/kuyustore 执行上面的命令后，自动在kuyustore下建立多个文件， 分别是conf, db,format,hooks, locks, README.txt。
配置 进入上面生成conf目录， 有以下几个文件:
authz, passwd, svnserve.conf
其中authz 配置用户权限，设置哪些用户可以读写哪些目录,passwd是设置用户和密码的, svnserve是主配置文件设置svn相关的操作。
passwd文件:
[users] # 用户名 =密码
kuyu=123456 以上表示建立了用户kuyu，注意行首不能有空格
authz文件:
[/]
kuyu= rw
。。。
意思是用户kuyu对所有的目录有读写权限
svnserve.conf文件:
[general]
auth-access = write password-db = passwd authz-db = authz realm = kuyustore  启动svn服务
svnserve -d -r /opt/svn  然后就可以通过TortoiseSVN客户端输入 svn://ip/kuyustore 链接svn服务了。虽然git等分布式版本控制工具是大势所趋，但是使用svn进行版本管理相对git来讲有以下优势
 相对简单，比git学习成本低。 权限控制比git好，可以精确控制目录权限 svn支持空目录，windows平台有较好的支持  </description>
    </item>
    
    <item>
      <title>win7下开启具有管理员权限的命令行窗口</title>
      <link>/post/win7%E4%B8%8B%E5%BC%80%E5%90%AF%E5%85%B7%E6%9C%89%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AA%97%E5%8F%A3/</link>
      <pubDate>Sun, 13 Jan 2013 22:19:53 +0800</pubDate>
      
      <guid>/post/win7%E4%B8%8B%E5%BC%80%E5%90%AF%E5%85%B7%E6%9C%89%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AA%97%E5%8F%A3/</guid>
      <description>使用vim在win7下敲代码的时候，发现最后保存的时候提示错误 ：E212：无法打开并写入文件，很是奇怪。
不论是新建文件还是编辑已有的文件，问题现象一致，猜想应该是所在目录的权限设置问题。但是问题又只在通过cmd窗口启动vim时才会出现，使用右键&amp;ndash;&amp;gt;vim编辑打开文件是ok的，查了一下，原来Windows7在开启UAC的情况下使用运行启动的cmd.exe是没有管理员权限的。而我的系统文件夹均是在图形界面下创建的，默认是管理员，其他用户没有写的权限。
那么，如何使用管理员权限启动cmd或者其他程序呢，一个简单的方法是：
在开始菜单的搜索框里输入cmd或者你要运行的程序名称，然后按下ctrl + shift + enter 即可</description>
    </item>
    
    <item>
      <title>windows下为有道添加星际译王词典</title>
      <link>/post/windows%E4%B8%8B%E4%B8%BA%E6%9C%89%E9%81%93%E6%B7%BB%E5%8A%A0%E6%98%9F%E9%99%85%E8%AF%91%E7%8E%8B%E8%AF%8D%E5%85%B8/</link>
      <pubDate>Thu, 16 Feb 2012 22:29:34 +0800</pubDate>
      
      <guid>/post/windows%E4%B8%8B%E4%B8%BA%E6%9C%89%E9%81%93%E6%B7%BB%E5%8A%A0%E6%98%9F%E9%99%85%E8%AF%91%E7%8E%8B%E8%AF%8D%E5%85%B8/</guid>
      <description>windows下一直使用有道词典，缺陷没有离线词库。今天终于找到让有道词典可以支持离线的方法，那就是给其添加大名鼎鼎的星际译王的词典（其实星际译王也有windows版的）。
1. 到这里下载自己需要的词典
2. 下载的文件默认是tar.bz2格式，一种linux的文件打包压缩格式（因为星际诞生于gnu/linux平台）。有道并不支持这种压缩的格式，需要解压。用winrar，等很多解压缩软件都可以。
3. 解压出来，后缀为dz,idx,ifo三个文件。建议将其全部拷贝到X:/Program Files/Youdao/DeskDict2/localdicts （X为你的有道安装目录）。
4. 打开有道桌面词典，按照下面的顺序操作：选项…-&amp;gt;词典管理-&amp;gt;添加，找到刚刚解压缩获得的文件夹里的ifo格式的文件，确认后添加。
现在可以方便的使用有道词典离线查词啦</description>
    </item>
    
  </channel>
</rss>