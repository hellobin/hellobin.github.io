<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>不足为外人道也</title>
    <link>http://www.luobin.me/</link>
    <description>Recent content on 不足为外人道也</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Jan 2016 10:12:02 +0800</lastBuildDate>
    <atom:link href="http://www.luobin.me/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>0</title>
      <link>http://www.luobin.me/joke/0/</link>
      <pubDate>Thu, 07 Jan 2016 10:12:02 +0800</pubDate>
      
      <guid>http://www.luobin.me/joke/0/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://ww3.sinaimg.cn/large/6bb75443gw1ezqqd3orj9j207n053jrc.jpg&#34; alt=&#34;程序猿&#34; /&gt;&lt;/p&gt;

&lt;p&gt;程序员问科比：“你为什么这么成功？”&lt;br /&gt;
科比：“你知道洛杉矶早晨4点钟是什么样子吗？”&lt;br /&gt;
程序员：“知道，一般那时候我还没睡。怎么了？”&lt;br /&gt;
科比：“……没事！”&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;点评：跟程序员比辛苦，你打完炮了人家还在抠腚呢~想想也是苦逼的程序员一枚。。不说了，都是泪。。
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>http://www.luobin.me/about/</link>
      <pubDate>Tue, 14 Apr 2015 22:17:00 +0200</pubDate>
      
      <guid>http://www.luobin.me/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>“名不副实”的JSON</title>
      <link>http://www.luobin.me/post/2/</link>
      <pubDate>Wed, 15 May 2013 09:21:14 +0800</pubDate>
      
      <guid>http://www.luobin.me/post/2/</guid>
      <description>&lt;p&gt;JSON (Javascript Object Notation):直接翻译就是javascript的对象表示方法。是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。 它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。也就是说现在的JSON俨然已经“名不副实”了&lt;/p&gt;

&lt;p&gt;JSON的特点:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JSON 是纯文本&lt;/li&gt;
&lt;li&gt;JSON 具有“自我描述性”（人类可读）&lt;/li&gt;
&lt;li&gt;JSON 具有层级结构（值中存在值）&lt;/li&gt;
&lt;li&gt;JSON 可通过 JavaScript 进行解析&lt;/li&gt;
&lt;li&gt;JSON 数据可使用 AJAX 进行传输&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;与 XML相比:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;没有结束标签&lt;/li&gt;
&lt;li&gt;更短&lt;/li&gt;
&lt;li&gt;读写的速度更快&lt;/li&gt;
&lt;li&gt;能够使用内建的 JavaScript eval() 方法进行解析&lt;/li&gt;
&lt;li&gt;使用数组&lt;/li&gt;
&lt;li&gt;不使用保留字&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;正因为如此JSON大有取缔XML之势&lt;/p&gt;

&lt;p&gt;JSON 的语法规则&lt;/p&gt;

&lt;p&gt;JSON 语法是 JavaScript 对象表示法语法的子集。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;数据在名称/值对中&lt;/li&gt;
&lt;li&gt;数据由逗号分隔&lt;/li&gt;
&lt;li&gt;花括号保存对象&lt;/li&gt;
&lt;li&gt;方括号保存数组&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example 1.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;employees&amp;quot;: [
    { &amp;quot;firstName&amp;quot;:&amp;quot;Bill&amp;quot; , &amp;quot;lastName&amp;quot;:&amp;quot;Gates&amp;quot; },
    { &amp;quot;firstName&amp;quot;:&amp;quot;George&amp;quot; , &amp;quot;lastName&amp;quot;:&amp;quot;Bush&amp;quot; },
    { &amp;quot;firstName&amp;quot;:&amp;quot;Thomas&amp;quot; , &amp;quot;lastName&amp;quot;:&amp;quot;Carter&amp;quot; }
     ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个 employee 对象是包含 3 个员工记录（对象）的数组&lt;/p&gt;

&lt;p&gt;JSON 值可以是：
    数字（整数或浮点数）
    字符串（在双引号中）
    逻辑值（true 或 false）
    数组（在方括号中）
    对象（在花括号中）
    null
因为 JSON 使用 JavaScript 语法，所以无需额外的软件就能处理 JavaScript 中的 JSON。
通过 JavaScript，您可以创建一个对象数组，并像这样进行赋值：&lt;/p&gt;

&lt;p&gt;Example 2.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var employees = [
{ &amp;quot;firstName&amp;quot;:&amp;quot;Bill&amp;quot; , &amp;quot;lastName&amp;quot;:&amp;quot;Gates&amp;quot; },
{ &amp;quot;firstName&amp;quot;:&amp;quot;George&amp;quot; , &amp;quot;lastName&amp;quot;:&amp;quot;Bush&amp;quot; },
{ &amp;quot;firstName&amp;quot;:&amp;quot;Thomas&amp;quot; , &amp;quot;lastName&amp;quot;: &amp;quot;Carter&amp;quot; }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以像这样访问 JavaScript 对象数组中的第一项：&lt;code&gt;employees[0].lastName;&lt;/code&gt;
返回的内容是：Gates&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>centos 下mysql5.6.10源码安装</title>
      <link>http://www.luobin.me/post/1/</link>
      <pubDate>Sat, 06 Apr 2013 22:33:21 +0800</pubDate>
      
      <guid>http://www.luobin.me/post/1/</guid>
      <description>&lt;p&gt;从mysql5.5起，mysql源码安装开始使用cmake了，所以首先要安装cmake
可以用命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rpm -qa | grep cmake
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查询当前系统有没有安装查cmake。&lt;/p&gt;

&lt;p&gt;下载解压安装cmake&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#tar -zvxf cmake-2.8.3.tar.gz
#cd cmake-2.8.3
#./configure
#make
#make install 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可能会出现没有C++编译器的错误，默认的gcc默认没有支持c++，使用以下语句安装
    #yum -y install gcc-c++&lt;/p&gt;

&lt;p&gt;执行源码编译配置脚本&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmake \
-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \
-DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock \
-DDEFAULT_CHARSET=utf8 \
-DDEFAULT_COLLATION=utf8_general_ci \
-DWITH_MYISAM_STORAGE_ENGINE=1 \
-DWITH_INNOBASE_STORAGE_ENGINE=1 \
-DWITH_ARCHIVE_STORAGE_ENGINE=1 \
-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \
-DWITH_MEMORY_STORAGE_ENGINE=1 \
-DWITH_READLINE=1 \
-DENABLED_LOCAL_INFILE=1 \
-DMYSQL_DATADIR=/db/mysql/data \
-DMYSQL_USER=mysql \
-DMYSQL_TCP_PORT=3306
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果出现以下错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmake .
-- MySQL 5.5.8
-- Could NOT find Curses (missing:  CURSES_LIBRARY  CURSES_INCLUDE_PATH)
CMake Error at cmake/readline.cmake:82 (MESSAGE):
Curses library not found.  Please install appropriate package,。。。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行 yum -y install ncurses-devel 命令，然后删除生成的CMakeCache.txt文件，重新执行cmake&lt;/p&gt;

&lt;p&gt;执行 &lt;code&gt;＃make  &amp;amp;&amp;amp; make install&lt;/code&gt; 编译安装&lt;/p&gt;

&lt;p&gt;在运行mysqld的时候可能会遇到类似：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (2) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的错误，只需重新确认一下mysql.sock文件的路径，在/etc/my.cnf 文件中设施一下socket=path即可。
对于mysqladmin，同样需要在/etc/my.cnf 文件中[mysqladmin]下设置socket 路径&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>