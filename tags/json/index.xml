<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json on 不足为外人道</title>
    <link>http://luobin.me/tags/json/</link>
    <description>Recent content in Json on 不足为外人道</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 May 2013 09:21:14 +0800</lastBuildDate>
    <atom:link href="http://luobin.me/tags/json/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>“名不副实”的JSON</title>
      <link>http://luobin.me/post/%E5%90%8D%E4%B8%8D%E5%89%AF%E5%AE%9E%E7%9A%84JSON/</link>
      <pubDate>Wed, 15 May 2013 09:21:14 +0800</pubDate>
      
      <guid>http://luobin.me/post/%E5%90%8D%E4%B8%8D%E5%89%AF%E5%AE%9E%E7%9A%84JSON/</guid>
      <description>&lt;p&gt;JSON (Javascript Object Notation):直接翻译就是javascript的对象表示方法。是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。 它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。也就是说现在的JSON俨然已经“名不副实”了&lt;/p&gt;

&lt;p&gt;JSON的特点:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JSON 是纯文本&lt;/li&gt;
&lt;li&gt;JSON 具有“自我描述性”（人类可读）&lt;/li&gt;
&lt;li&gt;JSON 具有层级结构（值中存在值）&lt;/li&gt;
&lt;li&gt;JSON 可通过 JavaScript 进行解析&lt;/li&gt;
&lt;li&gt;JSON 数据可使用 AJAX 进行传输&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;与 XML相比:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;没有结束标签&lt;/li&gt;
&lt;li&gt;更短&lt;/li&gt;
&lt;li&gt;读写的速度更快&lt;/li&gt;
&lt;li&gt;能够使用内建的 JavaScript eval() 方法进行解析&lt;/li&gt;
&lt;li&gt;使用数组&lt;/li&gt;
&lt;li&gt;不使用保留字&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;正因为如此JSON大有取缔XML之势&lt;/p&gt;

&lt;p&gt;JSON 的语法规则&lt;/p&gt;

&lt;p&gt;JSON 语法是 JavaScript 对象表示法语法的子集。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;数据在名称/值对中&lt;/li&gt;
&lt;li&gt;数据由逗号分隔&lt;/li&gt;
&lt;li&gt;花括号保存对象&lt;/li&gt;
&lt;li&gt;方括号保存数组&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example 1.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;employees&amp;quot;: [
    { &amp;quot;firstName&amp;quot;:&amp;quot;Bill&amp;quot; , &amp;quot;lastName&amp;quot;:&amp;quot;Gates&amp;quot; },
    { &amp;quot;firstName&amp;quot;:&amp;quot;George&amp;quot; , &amp;quot;lastName&amp;quot;:&amp;quot;Bush&amp;quot; },
    { &amp;quot;firstName&amp;quot;:&amp;quot;Thomas&amp;quot; , &amp;quot;lastName&amp;quot;:&amp;quot;Carter&amp;quot; }
     ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个 employee 对象是包含 3 个员工记录（对象）的数组&lt;/p&gt;

&lt;p&gt;JSON 值可以是：
    数字（整数或浮点数）
    字符串（在双引号中）
    逻辑值（true 或 false）
    数组（在方括号中）
    对象（在花括号中）
    null
因为 JSON 使用 JavaScript 语法，所以无需额外的软件就能处理 JavaScript 中的 JSON。
通过 JavaScript，您可以创建一个对象数组，并像这样进行赋值：&lt;/p&gt;

&lt;p&gt;Example 2.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var employees = [
{ &amp;quot;firstName&amp;quot;:&amp;quot;Bill&amp;quot; , &amp;quot;lastName&amp;quot;:&amp;quot;Gates&amp;quot; },
{ &amp;quot;firstName&amp;quot;:&amp;quot;George&amp;quot; , &amp;quot;lastName&amp;quot;:&amp;quot;Bush&amp;quot; },
{ &amp;quot;firstName&amp;quot;:&amp;quot;Thomas&amp;quot; , &amp;quot;lastName&amp;quot;: &amp;quot;Carter&amp;quot; }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以像这样访问 JavaScript 对象数组中的第一项：&lt;code&gt;employees[0].lastName;&lt;/code&gt;
返回的内容是：Gates&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>