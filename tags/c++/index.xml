<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on 不足为外人道</title>
    <link>/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on 不足为外人道</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 07 Jun 2014 17:50:24 +0800</lastBuildDate>
    
	<atom:link href="/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;智能指针</title>
      <link>/post/c&#43;&#43;%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Sat, 07 Jun 2014 17:50:24 +0800</pubDate>
      
      <guid>/post/c&#43;&#43;%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>&amp;emsp;&amp;emsp;关于智能指针，C++11中废弃了原来的auto_ptr，引入了shared_ptr,unique_ptr,weak_ptr。在引入智能指针之前，我们使用原生指针(built-in or raw)来手动控制内存的操作和释放，稍有不慎常会发生各种内存泄露或者undefined行为，这点使用c/c++开发过项目的必然都深有体会。世间万事万物都有其两面性，我们享受直接内存操作的便利快感的同时，有时候难免要忍受调试各种稀奇古怪的内存bug的酸爽。下面将逐个剖析新的智能指针系列引入的这几种类型的背后实现机制以及对于开发工作会有那些帮助。
shared_ptr &amp;emsp;&amp;emsp;首先这三种类型都是STL中实现的，具体不同的编译器附带的STL中的实现会有差异(事实上差异还比较大)，但是我们使用的时候需要引用的同一个头文件名:
#include&amp;lt;memory&amp;gt;  由于本人的主要开发环境是OS X,对应的主力编译器是clang,clang默认由原来使用GNU的libstdc++到现在自己重新实现了一套c++标准库，叫libc++,所以这里不加特别说明的话，当介绍具体实现的时候，默认指的是libc++的实现。
&amp;emsp;&amp;emsp;shared_基本用法:
#include &amp;lt;iostream&amp;gt; #include &amp;lt;memory&amp;gt; using namespace std; class X{ public: X()=default; X(int value) :data(value) { cout &amp;lt;&amp;lt;&amp;quot;constructor&amp;quot;&amp;lt;&amp;lt;endl; } ~X() { cout &amp;lt;&amp;lt;&amp;quot;destrucctor&amp;quot;&amp;lt;&amp;lt;endl; } int get_data() const { return data; } friend ostream&amp;amp; operator &amp;lt;&amp;lt; (ostream &amp;amp;out, const X&amp;amp; x) { out &amp;lt;&amp;lt;x.get_data(); return out; } private: int data; }; void f() { shared_ptr&amp;lt;X&amp;gt; sp(new X(5)); // cout&amp;lt;&amp;lt;*sp&amp;lt;&amp;lt;endl; //the same use as raw point cout &amp;lt;&amp;lt;&amp;quot;data = &amp;quot;&amp;lt;&amp;lt;sp-&amp;gt;get_data()&amp;lt;&amp;lt;endl; cout &amp;lt;&amp;lt;&amp;quot;use_count = &amp;quot; &amp;lt;&amp;lt;sp.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;右值引用</title>
      <link>/post/c&#43;&#43;%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</link>
      <pubDate>Fri, 21 Mar 2014 16:20:01 +0800</pubDate>
      
      <guid>/post/c&#43;&#43;%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</guid>
      <description>value category &amp;emsp;&amp;emsp;左值/右值是沿用c语言中的叫法，直观上理解就是分别出现在赋值表达式左右。c++标准中关于左值和右值的描述如下:
 An lvalue (so called, historically, because lvalues could appear on the left-hand side of an assignment expression)designates a function or an object. [ Example: If E is an expression of pointer type, then *E is an lvalue expression referring to the object or function to which E points. As another example, the result of calling a function whose return type is an lvalue reference is an lvalue.</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43;学习资源</title>
      <link>/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</link>
      <pubDate>Sun, 09 Mar 2014 21:52:05 +0800</pubDate>
      
      <guid>/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</guid>
      <description>  IBM C/C++ Cafe C++ FAQ C++11FAQ by Bjarne Stroustrup latest C++ standards drafts C++11’s Smart Pointers More C++ Idioms University of Michigan&amp;rsquo;s EECS 381 - Object-Oriented and Advanced Programming CppTemplateTutorial-空明流转作品 apple libcpp isocpp  Blogs  Solarian Programmer  Graphic  How OpenGL works:soft render  Network  skynet&amp;ndash;A lightweight online game framework The C10K problem Fast portable non-blocking network programming with Libevent cppreference  </description>
    </item>
    
    <item>
      <title>C&#43;&#43;特殊成员函数总结</title>
      <link>/post/c&#43;&#43;%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 25 Aug 2013 09:48:23 +0800</pubDate>
      
      <guid>/post/c&#43;&#43;%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</guid>
      <description>&amp;emsp;&amp;emsp;所谓特殊成员函数，按照c++11的标准描述：
 The default constructor, copy constructor and copy assignment operator , move constructor and move assignment operator , and destructor are special member functions. [Note: The implementation will implicitly declare these member functions for some class types when the program does not explicitly declare them. The implementation will implicitly define them if they are odr-used.
 总结下就是：
 Default constructors //默认构造函数 Destructors //析构函数 Copy constructors //拷贝构造函数 Copy assignment operators //拷贝赋值操作 Move constructors // move 构造函数 Move assignment operators //move 复制操作  根据标准中的描述，对于特殊成员函数，如果程序中没有明确的声明，编译器实现会进行隐式的声明，而且符合odr规则，也会提供一份隐式的实现。（odr&amp;ndash;One Definition Rule）。这里我们举个例子验证下：</description>
    </item>
    
  </channel>
</rss>